// Generated by CoffeeScript 1.7.1

/*
 Requires
 */
var app, client, elasticsearch, express, index;

express = require("express");

elasticsearch = require('elasticsearch');


/*
 Configuration
 */

client = new elasticsearch.Client({
  host: '127.0.0.1:9200',
  log: 'trace'
});

index = "fantoir_base";

app = express();

app.use(express.logger("dev"));

app.use(express.bodyParser());

app.use(express["static"](__dirname + "/public"));

app.use(express.errorHandler({
  dumpExceptions: true,
  showStack: true
}));

app.get("/api/:type/list", function(req, res) {
  var from, query, scroll, size, sort;
  console.log('test');
  from = parseInt(req.query.from) || 0;
  size = parseInt(req.query.size) || 10;
  sort = ["departement"];
  if (req.params.type === "commune" || req.params.type === "voie") {
    sort.push("insee");
  }
  if (req.params.type === "voie") {
    sort.push("id");
  }
  if (req.query.sort != null) {
    sort.unshift(req.query.sort);
  }
  scroll = req.query.scroll || "15m";
  query = {
    "query": {
      "bool": {
        "must": [
          {
            "match_all": {}
          }
        ],
        "must_not": [],
        "should": []
      },
      "facets": {}
    }
  };
  return client.search({
    "index": index,
    "type": req.params.type,
    "scroll": scroll,
    "from": from,
    "size": size,
    "sort": sort,
    "body": query
  }, function(error, response) {
    if (error) {
      console.log(error);
      return res.json({
        "error": error,
        "response": response
      });
    } else {
      return res.json(response);
    }
  });
});

app.get("/api/:type/:departement/list", function(req, res) {
  var from, query, routing, scroll, size, sort;
  console.log('test');
  from = parseInt(req.query.from) || 0;
  size = parseInt(req.query.size) || 10;
  sort = ["departement"];
  if (req.params.type === "commune" || req.params.type === "voie") {
    sort.push("insee");
  }
  if (req.params.type === "voie") {
    sort.push("id");
  }
  if (req.query.sort != null) {
    sort.unshift(req.query.sort);
  }
  scroll = req.query.scroll || "15m";
  routing = req.params.departement;
  query = {
    "query": {
      "bool": {
        "must": [
          {
            "term": {
              "departement": req.params.departement
            }
          }
        ],
        "must_not": [],
        "should": []
      },
      "facets": {}
    }
  };
  return client.search({
    "index": index,
    "type": req.params.type,
    "scroll": scroll,
    "from": from,
    "size": size,
    "sort": sort,
    "body": query
  }, function(error, response) {
    if (error) {
      console.log(error);
      return res.json({
        "error": error,
        "response": response
      });
    } else {
      return res.json(response);
    }
  });
});

app.get("/api/:type/:departement/:insee/list", function(req, res) {
  var from, query, routing, scroll, size, sort;
  console.log('test');
  from = parseInt(req.query.from) || 0;
  size = parseInt(req.query.size) || 10;
  sort = ["departement"];
  if (req.params.type === "commune" || req.params.type === "voie") {
    sort.push("insee");
  }
  if (req.params.type === "voie") {
    sort.push("id");
  }
  if (req.query.sort != null) {
    sort.unshift(req.query.sort);
  }
  scroll = req.query.scroll || "15m";
  routing = req.params.departement;
  query = {
    "query": {
      "bool": {
        "must": [
          {
            "term": {
              "departement": req.params.departement
            }
          }, {
            "term": {
              "insee": req.params.insee
            }
          }
        ],
        "must_not": [],
        "should": []
      },
      "facets": {}
    }
  };
  return client.search({
    "index": index,
    "type": req.params.type,
    "scroll": scroll,
    "from": from,
    "size": size,
    "sort": sort,
    "body": query
  }, function(error, response) {
    if (error) {
      console.log(error);
      return res.json({
        "error": error,
        "response": response
      });
    } else {
      return res.json(response);
    }
  });
});

app.get("/api/cp/:codePostal", function(req, res) {
  var from, query, scroll, size, sort;
  console.log('test');
  from = parseInt(req.query.from) || 0;
  size = parseInt(req.query.size) || 10;
  sort = [];
  if (req.query.sort != null) {
    sort.unshift(req.query.sort);
  }
  scroll = req.query.scroll || "15m";
  query = {
    "query": {
      "prefix": {
        "codePostal": req.params.codePostal
      }
    }
  };
  return client.search({
    "index": index,
    "type": "commune",
    "scroll": scroll,
    "from": from,
    "size": size,
    "sort": sort,
    "body": query
  }, function(error, response) {
    if (error) {
      console.log(error);
      return res.json({
        "error": error,
        "response": response
      });
    } else {
      return res.json(response);
    }
  });
});

app.get("/api/qs/:champ/:val", function(req, res) {
  var from, query, scroll, size, sort;
  console.log('test');
  from = parseInt(req.query.from) || 0;
  size = parseInt(req.query.size) || 10;
  sort = [];
  if (req.query.sort != null) {
    sort.unshift(req.query.sort);
  }
  scroll = req.query.scroll || "15m";
  query = {
    "query": {
      "bool": {
        "must": [
          {
            "query_string": {
              "default_field": req.params.champ,
              "query": req.params.val
            }
          }
        ]
      }
    },
    "facets": {}
  };
  return client.search({
    "index": index,
    "scroll": scroll,
    "from": from,
    "size": size,
    "sort": sort,
    "body": query
  }, function(error, response) {
    if (error) {
      console.log(error);
      return res.json({
        "error": error,
        "response": response
      });
    } else {
      return res.json(response);
    }
  });
});

app.get("/api/qs/:type/:champ/:val", function(req, res) {
  var from, query, scroll, size, sort;
  console.log('test');
  from = parseInt(req.query.from) || 0;
  size = parseInt(req.query.size) || 10;
  sort = [];
  if (req.query.sort != null) {
    sort.unshift(req.query.sort);
  }
  scroll = req.query.scroll || "15m";
  query = {
    "query": {
      "bool": {
        "must": [
          {
            "query_string": {
              "default_field": req.params.champ,
              "query": req.params.val
            }
          }
        ]
      }
    },
    "facets": {}
  };
  return client.search({
    "index": index,
    "type": req.params.type,
    "scroll": scroll,
    "from": from,
    "size": size,
    "sort": sort,
    "body": query
  }, function(error, response) {
    if (error) {
      console.log(error);
      return res.json({
        "error": error,
        "response": response
      });
    } else {
      return res.json(response);
    }
  });
});

app.get("/api/qs/:type/:champ/:departement/:val", function(req, res) {
  var from, query, routing, scroll, size, sort;
  console.log('test');
  from = parseInt(req.query.from) || 0;
  size = parseInt(req.query.size) || 10;
  sort = [];
  if (req.query.sort != null) {
    sort.unshift(req.query.sort);
  }
  scroll = req.query.scroll || "15m";
  routing = req.params.departement;
  query = {
    "query": {
      "bool": {
        "must": [
          {
            "term": {
              "departement": req.params.departement
            }
          }, {
            "query_string": {
              "default_field": req.params.champ,
              "query": req.params.val
            }
          }
        ]
      }
    },
    "facets": {}
  };
  return client.search({
    "index": index,
    "type": req.params.type,
    "scroll": scroll,
    "from": from,
    "size": size,
    "sort": sort,
    "body": query
  }, function(error, response) {
    if (error) {
      console.log(error);
      return res.json({
        "error": error,
        "response": response
      });
    } else {
      return res.json(response);
    }
  });
});

app.get("/api/qs/:type/:champ/:departement/:insee/:val", function(req, res) {
  var from, query, routing, scroll, size, sort;
  from = parseInt(req.query.from) || 0;
  size = parseInt(req.query.size) || 10;
  sort = [];
  if (req.query.sort != null) {
    sort.unshift(req.query.sort);
  }
  scroll = req.query.scroll || "15m";
  routing = req.params.departement;
  query = {
    "query": {
      "bool": {
        "must": [
          {
            "term": {
              "departement": req.params.departement
            }
          }, {
            "query_string": {
              "default_field": req.params.champ,
              "query": req.params.val
            }
          }
        ],
        "should": [
          {
            "term": {
              "insee": req.params.insee
            }
          }
        ]
      }
    },
    "facets": {}
  };
  return client.search({
    "index": index,
    "type": req.params.type,
    "scroll": scroll,
    "from": from,
    "size": size,
    "sort": sort,
    "body": query
  }, function(error, response) {
    if (error) {
      console.log(error);
      return res.json({
        "error": error,
        "response": response
      });
    } else {
      return res.json(response);
    }
  });
});

app.get("/api/fuzzyl/:type/:insee/:val", function(req, res) {
  var from, query, scroll, size, sort;
  from = parseInt(req.query.from) || 0;
  size = parseInt(req.query.size) || 10;
  sort = [];
  if (req.query.sort != null) {
    sort.unshift(req.query.sort);
  }
  scroll = req.query.scroll || "15m";
  query = {
    "query": {
      "bool": {
        "must": [],
        "should": [
          {
            "term": {
              "insee": req.params.insee
            }
          }, {
            "fuzzy_like_this_field": {
              "name": {
                "like_text": req.params.val,
                "fuzziness": 2
              }
            }
          }
        ]
      }
    },
    "facets": {}
  };
  return client.search({
    "index": index,
    "type": req.params.type,
    "scroll": scroll,
    "from": from,
    "size": size,
    "sort": sort,
    "body": query
  }, function(error, response) {
    if (error) {
      console.log(error);
      return res.json({
        "error": error,
        "response": response
      });
    } else {
      return res.json(response);
    }
  });
});

app.get("/api/fuzzyl/:type/:val", function(req, res) {
  var from, query, scroll, size, sort;
  from = parseInt(req.query.from) || 0;
  size = parseInt(req.query.size) || 10;
  sort = [];
  if (req.query.sort != null) {
    sort.unshift(req.query.sort);
  }
  scroll = req.query.scroll || "15m";
  query = {
    "query": {
      "bool": {
        "must": [],
        "should": [
          {
            "fuzzy_like_this_field": {
              "name": {
                "like_text": req.params.val,
                "fuzziness": 2
              }
            }
          }
        ]
      }
    },
    "facets": {}
  };
  return client.search({
    "index": index,
    "type": req.params.type,
    "scroll": scroll,
    "from": from,
    "size": size,
    "sort": sort,
    "body": query
  }, function(error, response) {
    if (error) {
      console.log(error);
      return res.json({
        "error": error,
        "response": response
      });
    } else {
      return res.json(response);
    }
  });
});

app.get("/api/fuzzy/:type/:departement/:insee/:val", function(req, res) {
  var from, query, routing, scroll, size, sort, v, vals, _i, _len;
  from = parseInt(req.query.from) || 0;
  size = parseInt(req.query.size) || 10;
  sort = [];
  vals = req.params.val.split(" ");
  if (req.query.sort != null) {
    sort.unshift(req.query.sort);
  }
  scroll = req.query.scroll || "15m";
  routing = req.params.departement;
  query = {
    "query": {
      "bool": {
        "must": [],
        "should": [
          {
            "term": {
              "departement": req.params.departement
            }
          }, {
            "term": {
              "insee": req.params.insee
            }
          }
        ]
      }
    },
    "facets": {}
  };
  for (_i = 0, _len = vals.length; _i < _len; _i++) {
    v = vals[_i];
    query.query.bool.should.push({
      "fuzzy": {
        "name": {
          "value": v,
          "boost": 1,
          "fuzziness": 2,
          "prefix_length": 0,
          "max_expansions": 100
        }
      }
    });
  }
  return client.search({
    "index": index,
    "type": req.params.type,
    "scroll": scroll,
    "from": from,
    "size": size,
    "sort": sort,
    "body": query
  }, function(error, response) {
    if (error) {
      console.log(error);
      return res.json({
        "error": error,
        "response": response
      });
    } else {
      return res.json(response);
    }
  });
});

app.get("/api/get/:id", function(req, res) {
  return client.get({
    "index": index,
    "type": "_all",
    "routing": req.params.id.slice(0, 2),
    "realtime": true,
    "id": req.params.id
  }, function(error, response) {
    if (error) {
      console.log(error);
      return res.json({
        "error": error,
        "response": response
      });
    } else {
      return res.json(response);
    }
  });
});

app.get("/api/getSource/:id", function(req, res) {
  return client.getSource({
    "index": index,
    "type": "_all",
    "routing": req.params.id.slice(0, 2),
    "realtime": true,
    "id": req.params.id
  }, function(error, response) {
    if (error) {
      console.log(error);
      return res.json({
        "error": error,
        "response": response
      });
    } else {
      return res.json(response);
    }
  });
});

app.get("/api/completion/:type/:text", function(req, res) {
  return client.suggest({
    "index": index,
    "type": req.params.type,
    "body": {
      "suggest": {
        "text": req.params.text,
        "completion": {
          "field": req.params.type + '_suggest'
        }
      }
    }
  }, function(error, response) {
    if (error) {
      console.log(error);
      return res.json({
        "error": error,
        "response": response
      });
    } else {
      return res.json(response);
    }
  });
});

app.get("/api/completion/:type/:route/:text", function(req, res) {
  return client.suggest({
    "index": index,
    "type": req.params.type,
    "routing": req.params.route,
    "body": {
      "suggest": {
        "text": req.params.text,
        "completion": {
          "field": req.params.type + '_suggest'
        }
      }
    }
  }, function(error, response) {
    if (error) {
      console.log(error);
      return res.json({
        "error": error,
        "response": response
      });
    } else {
      return res.json(response);
    }
  });
});

app.get("/api/cp/:cp", function(req, res) {
  var from, query, routing, scroll, size, sort;
  from = parseInt(req.query.from) || 0;
  size = parseInt(req.query.size) || 10;
  sort = [];
  if (req.query.sort != null) {
    sort.unshift(req.query.sort);
  }
  scroll = req.query.scroll || "15m";
  routing = req.query.route;
  query = {
    "query": {
      "term": {
        "codePostal": req.params.cp
      }
    }
  };
  return client.search({
    "index": index,
    "type": "commune",
    "scroll": scroll,
    "from": from,
    "size": size,
    "sort": sort,
    "body": query
  }, function(error, response) {
    if (error) {
      console.log(error);
      return res.json({
        "error": error,
        "response": response
      });
    } else {
      return res.json(response);
    }
  });
});

app.get("/api/search", function(req, res) {
  var commune, cp, del, from, query, routing, scroll, size, sort, voie;
  from = parseInt(req.query.from) || 0;
  size = parseInt(req.query.size) || 10;
  sort = [];
  cp = req.query.cp;
  commune = req.query.commune;
  del = req.query.del;
  voie = req.query.voie;
  if (req.query.sort != null) {
    sort.unshift(req.query.sort);
  }
  scroll = req.query.scroll || "15m";
  routing = req.query.route;
  query = {
    "query": {
      "bool": {
        "must": [],
        "must_not": [],
        "should": []
      }
    },
    "facets": {}
  };
  if (del === false) {
    query.query.bool.must_not.push({
      "range": {
        "dateDel": {
          "gte": 0,
          "boost": 0.1
        }
      }
    });
  }
  if (commune) {
    query.query.bool.should.push({
      "has_parent": {
        "parent_type": "commune",
        "score_mode": "score",
        "query": {
          "fuzzy_like_this_field": {
            "commune.name": {
              "like_text": commune,
              "fuzziness": 2
            }
          }
        }
      }
    });
  }
  if (cp) {
    query.query.bool.should.push({
      "has_parent": {
        "parent_type": "commune",
        "score_mode": "score",
        "query": {
          "term": {
            "commune.codePostal": cp
          }
        }
      }
    });
  }
  if (voie) {
    query.query.bool.should.push({
      "fuzzy_like_this_field": {
        "voie.name": {
          "like_text": voie,
          "fuzziness": 2
        }
      }
    });
  }
  return client.search({
    "index": index,
    "type": req.query.type || "_all",
    "scroll": scroll,
    "from": from,
    "size": size,
    "sort": sort,
    "body": query
  }, function(error, response) {
    if (error) {
      console.log(error);
      return res.json({
        "error": error,
        "response": response
      });
    } else {
      return res.json(response);
    }
  });
});

app.get("/api/update/:routing/:parent/:id/:field/:value", function(req, res) {
  switch (req.params.field) {
    case 'name':
      return res.json({
        "error": "This field can't be updated!"
      });
  }
});

app.get('/', function(req, res) {
  return res.sendfile('./public/index.html');
});

app.listen(8080, function() {
  return console.log("port: 8080");
});
